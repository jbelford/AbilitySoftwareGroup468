#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from log import LoggerRpc
from log.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  error UserCommand(Command cmd)')
    print('  error QuoteServer(QuoteData quote, i64 tid)')
    print('  error AccountTransaction(string userid, i64 funds, string action, i64 tid)')
    print('  error SystemEvent(Command cmd)')
    print('  error ErrorEvent(Command cmd, string e)')
    print('  error DebugEvent(Command cmd, string debug)')
    print('   DumpLogUser(string userid)')
    print('   DumpLog()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = LoggerRpc.Client(protocol)
transport.open()

if cmd == 'UserCommand':
    if len(args) != 1:
        print('UserCommand requires 1 args')
        sys.exit(1)
    pp.pprint(client.UserCommand(eval(args[0]),))

elif cmd == 'QuoteServer':
    if len(args) != 2:
        print('QuoteServer requires 2 args')
        sys.exit(1)
    pp.pprint(client.QuoteServer(eval(args[0]), eval(args[1]),))

elif cmd == 'AccountTransaction':
    if len(args) != 4:
        print('AccountTransaction requires 4 args')
        sys.exit(1)
    pp.pprint(client.AccountTransaction(args[0], eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'SystemEvent':
    if len(args) != 1:
        print('SystemEvent requires 1 args')
        sys.exit(1)
    pp.pprint(client.SystemEvent(eval(args[0]),))

elif cmd == 'ErrorEvent':
    if len(args) != 2:
        print('ErrorEvent requires 2 args')
        sys.exit(1)
    pp.pprint(client.ErrorEvent(eval(args[0]), args[1],))

elif cmd == 'DebugEvent':
    if len(args) != 2:
        print('DebugEvent requires 2 args')
        sys.exit(1)
    pp.pprint(client.DebugEvent(eval(args[0]), args[1],))

elif cmd == 'DumpLogUser':
    if len(args) != 1:
        print('DumpLogUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.DumpLogUser(args[0],))

elif cmd == 'DumpLog':
    if len(args) != 0:
        print('DumpLog requires 0 args')
        sys.exit(1)
    pp.pprint(client.DumpLog())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()

#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Response(object):
    """
    Attributes:
     - Success
     - Message
     - Stock
     - Quote
     - ReqAmount
     - RealAmount
     - Shares
     - Expiration
     - Paid
     - Received
     - SharesAfford
     - AffordAmount
     - Status
     - Transactions
     - Triggers
     - File
    """


    def __init__(self, Success=None, Message=None, Stock=None, Quote=None, ReqAmount=None, RealAmount=None, Shares=None, Expiration=None, Paid=None, Received=None, SharesAfford=None, AffordAmount=None, Status=None, Transactions=None, Triggers=None, File=None,):
        self.Success = Success
        self.Message = Message
        self.Stock = Stock
        self.Quote = Quote
        self.ReqAmount = ReqAmount
        self.RealAmount = RealAmount
        self.Shares = Shares
        self.Expiration = Expiration
        self.Paid = Paid
        self.Received = Received
        self.SharesAfford = SharesAfford
        self.AffordAmount = AffordAmount
        self.Status = Status
        self.Transactions = Transactions
        self.Triggers = Triggers
        self.File = File

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.Success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Stock = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.Quote = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.ReqAmount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.RealAmount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.Shares = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.Expiration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.Paid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.Received = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.SharesAfford = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.AffordAmount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.Status = UserInfo()
                    self.Status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.Transactions = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Transaction()
                        _elem5.read(iprot)
                        self.Transactions.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.Triggers = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = Trigger()
                        _elem11.read(iprot)
                        self.Triggers.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.File = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readBinary()
                        self.File.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Response')
        if self.Success is not None:
            oprot.writeFieldBegin('Success', TType.BOOL, 1)
            oprot.writeBool(self.Success)
            oprot.writeFieldEnd()
        if self.Message is not None:
            oprot.writeFieldBegin('Message', TType.STRING, 2)
            oprot.writeString(self.Message.encode('utf-8') if sys.version_info[0] == 2 else self.Message)
            oprot.writeFieldEnd()
        if self.Stock is not None:
            oprot.writeFieldBegin('Stock', TType.STRING, 3)
            oprot.writeString(self.Stock.encode('utf-8') if sys.version_info[0] == 2 else self.Stock)
            oprot.writeFieldEnd()
        if self.Quote is not None:
            oprot.writeFieldBegin('Quote', TType.I64, 4)
            oprot.writeI64(self.Quote)
            oprot.writeFieldEnd()
        if self.ReqAmount is not None:
            oprot.writeFieldBegin('ReqAmount', TType.I64, 5)
            oprot.writeI64(self.ReqAmount)
            oprot.writeFieldEnd()
        if self.RealAmount is not None:
            oprot.writeFieldBegin('RealAmount', TType.I64, 6)
            oprot.writeI64(self.RealAmount)
            oprot.writeFieldEnd()
        if self.Shares is not None:
            oprot.writeFieldBegin('Shares', TType.I32, 7)
            oprot.writeI32(self.Shares)
            oprot.writeFieldEnd()
        if self.Expiration is not None:
            oprot.writeFieldBegin('Expiration', TType.I64, 8)
            oprot.writeI64(self.Expiration)
            oprot.writeFieldEnd()
        if self.Paid is not None:
            oprot.writeFieldBegin('Paid', TType.I64, 9)
            oprot.writeI64(self.Paid)
            oprot.writeFieldEnd()
        if self.Received is not None:
            oprot.writeFieldBegin('Received', TType.I64, 10)
            oprot.writeI64(self.Received)
            oprot.writeFieldEnd()
        if self.SharesAfford is not None:
            oprot.writeFieldBegin('SharesAfford', TType.I32, 11)
            oprot.writeI32(self.SharesAfford)
            oprot.writeFieldEnd()
        if self.AffordAmount is not None:
            oprot.writeFieldBegin('AffordAmount', TType.I64, 12)
            oprot.writeI64(self.AffordAmount)
            oprot.writeFieldEnd()
        if self.Status is not None:
            oprot.writeFieldBegin('Status', TType.STRUCT, 13)
            self.Status.write(oprot)
            oprot.writeFieldEnd()
        if self.Transactions is not None:
            oprot.writeFieldBegin('Transactions', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.Transactions))
            for iter18 in self.Transactions:
                iter18.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.Triggers is not None:
            oprot.writeFieldBegin('Triggers', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.Triggers))
            for iter19 in self.Triggers:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.File is not None:
            oprot.writeFieldBegin('File', TType.LIST, 16)
            oprot.writeListBegin(TType.STRING, len(self.File))
            for iter20 in self.File:
                oprot.writeBinary(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Command(object):
    """
    Attributes:
     - C_type
     - TransactionID
     - UserId
     - Amount
     - StockSymbol
     - FileName
     - Timestamp
    """


    def __init__(self, C_type=None, TransactionID=None, UserId=None, Amount=None, StockSymbol=None, FileName=None, Timestamp=None,):
        self.C_type = C_type
        self.TransactionID = TransactionID
        self.UserId = UserId
        self.Amount = Amount
        self.StockSymbol = StockSymbol
        self.FileName = FileName
        self.Timestamp = Timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.C_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.TransactionID = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.UserId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.Amount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.StockSymbol = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.FileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.Timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Command')
        if self.C_type is not None:
            oprot.writeFieldBegin('C_type', TType.I32, 1)
            oprot.writeI32(self.C_type)
            oprot.writeFieldEnd()
        if self.TransactionID is not None:
            oprot.writeFieldBegin('TransactionID', TType.I64, 2)
            oprot.writeI64(self.TransactionID)
            oprot.writeFieldEnd()
        if self.UserId is not None:
            oprot.writeFieldBegin('UserId', TType.STRING, 3)
            oprot.writeString(self.UserId.encode('utf-8') if sys.version_info[0] == 2 else self.UserId)
            oprot.writeFieldEnd()
        if self.Amount is not None:
            oprot.writeFieldBegin('Amount', TType.I64, 4)
            oprot.writeI64(self.Amount)
            oprot.writeFieldEnd()
        if self.StockSymbol is not None:
            oprot.writeFieldBegin('StockSymbol', TType.STRING, 5)
            oprot.writeString(self.StockSymbol.encode('utf-8') if sys.version_info[0] == 2 else self.StockSymbol)
            oprot.writeFieldEnd()
        if self.FileName is not None:
            oprot.writeFieldBegin('FileName', TType.STRING, 6)
            oprot.writeString(self.FileName.encode('utf-8') if sys.version_info[0] == 2 else self.FileName)
            oprot.writeFieldEnd()
        if self.Timestamp is not None:
            oprot.writeFieldBegin('Timestamp', TType.I64, 7)
            oprot.writeI64(self.Timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserInfo(object):
    """
    Attributes:
     - Balance
     - Reserved
     - Stock
    """


    def __init__(self, Balance=None, Reserved=None, Stock=None,):
        self.Balance = Balance
        self.Reserved = Reserved
        self.Stock = Stock

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.Balance = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.Reserved = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.Stock = STOCK()
                    self.Stock.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserInfo')
        if self.Balance is not None:
            oprot.writeFieldBegin('Balance', TType.I64, 1)
            oprot.writeI64(self.Balance)
            oprot.writeFieldEnd()
        if self.Reserved is not None:
            oprot.writeFieldBegin('Reserved', TType.I64, 2)
            oprot.writeI64(self.Reserved)
            oprot.writeFieldEnd()
        if self.Stock is not None:
            oprot.writeFieldBegin('Stock', TType.STRUCT, 3)
            self.Stock.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class User(object):
    """
    Attributes:
     - User
     - Balance
     - Reserved
     - stock
    """


    def __init__(self, User=None, Balance=None, Reserved=None, stock=None,):
        self.User = User
        self.Balance = Balance
        self.Reserved = Reserved
        self.stock = stock

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.User = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.Balance = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.Reserved = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.stock = STOCK()
                    self.stock.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('User')
        if self.User is not None:
            oprot.writeFieldBegin('User', TType.STRING, 1)
            oprot.writeString(self.User.encode('utf-8') if sys.version_info[0] == 2 else self.User)
            oprot.writeFieldEnd()
        if self.Balance is not None:
            oprot.writeFieldBegin('Balance', TType.I64, 2)
            oprot.writeI64(self.Balance)
            oprot.writeFieldEnd()
        if self.Reserved is not None:
            oprot.writeFieldBegin('Reserved', TType.I64, 3)
            oprot.writeI64(self.Reserved)
            oprot.writeFieldEnd()
        if self.stock is not None:
            oprot.writeFieldBegin('stock', TType.STRUCT, 4)
            self.stock.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class STOCK(object):
    """
    Attributes:
     - Real
     - Reserved
    """


    def __init__(self, Real=None, Reserved=None,):
        self.Real = Real
        self.Reserved = Reserved

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.Real = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.Reserved = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('STOCK')
        if self.Real is not None:
            oprot.writeFieldBegin('Real', TType.I64, 1)
            oprot.writeI64(self.Real)
            oprot.writeFieldEnd()
        if self.Reserved is not None:
            oprot.writeFieldBegin('Reserved', TType.I64, 2)
            oprot.writeI64(self.Reserved)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Trigger(object):
    """
    Attributes:
     - UserId
     - Stock
     - TransactionID
     - Type
     - Shares
     - Amount
     - When
    """


    def __init__(self, UserId=None, Stock=None, TransactionID=None, Type=None, Shares=None, Amount=None, When=None,):
        self.UserId = UserId
        self.Stock = Stock
        self.TransactionID = TransactionID
        self.Type = Type
        self.Shares = Shares
        self.Amount = Amount
        self.When = When

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.UserId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Stock = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.TransactionID = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.Shares = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.Amount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.When = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Trigger')
        if self.UserId is not None:
            oprot.writeFieldBegin('UserId', TType.STRING, 1)
            oprot.writeString(self.UserId.encode('utf-8') if sys.version_info[0] == 2 else self.UserId)
            oprot.writeFieldEnd()
        if self.Stock is not None:
            oprot.writeFieldBegin('Stock', TType.STRING, 2)
            oprot.writeString(self.Stock.encode('utf-8') if sys.version_info[0] == 2 else self.Stock)
            oprot.writeFieldEnd()
        if self.TransactionID is not None:
            oprot.writeFieldBegin('TransactionID', TType.I64, 3)
            oprot.writeI64(self.TransactionID)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.STRING, 4)
            oprot.writeString(self.Type.encode('utf-8') if sys.version_info[0] == 2 else self.Type)
            oprot.writeFieldEnd()
        if self.Shares is not None:
            oprot.writeFieldBegin('Shares', TType.I32, 5)
            oprot.writeI32(self.Shares)
            oprot.writeFieldEnd()
        if self.Amount is not None:
            oprot.writeFieldBegin('Amount', TType.I64, 6)
            oprot.writeI64(self.Amount)
            oprot.writeFieldEnd()
        if self.When is not None:
            oprot.writeFieldBegin('When', TType.I64, 7)
            oprot.writeI64(self.When)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Transaction(object):
    """
    Attributes:
     - Type
     - Triggered
     - Stock
     - Amount
     - Shares
     - TimeStamp
    """


    def __init__(self, Type=None, Triggered=None, Stock=None, Amount=None, Shares=None, TimeStamp=None,):
        self.Type = Type
        self.Triggered = Triggered
        self.Stock = Stock
        self.Amount = Amount
        self.Shares = Shares
        self.TimeStamp = TimeStamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.Type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.Triggered = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Stock = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.Amount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.Shares = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.TimeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Transaction')
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.STRING, 1)
            oprot.writeString(self.Type.encode('utf-8') if sys.version_info[0] == 2 else self.Type)
            oprot.writeFieldEnd()
        if self.Triggered is not None:
            oprot.writeFieldBegin('Triggered', TType.BOOL, 2)
            oprot.writeBool(self.Triggered)
            oprot.writeFieldEnd()
        if self.Stock is not None:
            oprot.writeFieldBegin('Stock', TType.STRING, 3)
            oprot.writeString(self.Stock.encode('utf-8') if sys.version_info[0] == 2 else self.Stock)
            oprot.writeFieldEnd()
        if self.Amount is not None:
            oprot.writeFieldBegin('Amount', TType.I64, 4)
            oprot.writeI64(self.Amount)
            oprot.writeFieldEnd()
        if self.Shares is not None:
            oprot.writeFieldBegin('Shares', TType.I32, 5)
            oprot.writeI32(self.Shares)
            oprot.writeFieldEnd()
        if self.TimeStamp is not None:
            oprot.writeFieldBegin('TimeStamp', TType.I64, 6)
            oprot.writeI64(self.TimeStamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PendingTxn(object):
    """
    Attributes:
     - UserId
     - Type
     - Stock
     - Reserved
     - Price
     - Shares
     - Expiry
     - error
    """


    def __init__(self, UserId=None, Type=None, Stock=None, Reserved=None, Price=None, Shares=None, Expiry=None, error=None,):
        self.UserId = UserId
        self.Type = Type
        self.Stock = Stock
        self.Reserved = Reserved
        self.Price = Price
        self.Shares = Shares
        self.Expiry = Expiry
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.UserId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Stock = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.Reserved = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.Price = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.Shares = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.Expiry = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.error = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PendingTxn')
        if self.UserId is not None:
            oprot.writeFieldBegin('UserId', TType.STRING, 1)
            oprot.writeString(self.UserId.encode('utf-8') if sys.version_info[0] == 2 else self.UserId)
            oprot.writeFieldEnd()
        if self.Type is not None:
            oprot.writeFieldBegin('Type', TType.STRING, 2)
            oprot.writeString(self.Type.encode('utf-8') if sys.version_info[0] == 2 else self.Type)
            oprot.writeFieldEnd()
        if self.Stock is not None:
            oprot.writeFieldBegin('Stock', TType.STRING, 3)
            oprot.writeString(self.Stock.encode('utf-8') if sys.version_info[0] == 2 else self.Stock)
            oprot.writeFieldEnd()
        if self.Reserved is not None:
            oprot.writeFieldBegin('Reserved', TType.I64, 4)
            oprot.writeI64(self.Reserved)
            oprot.writeFieldEnd()
        if self.Price is not None:
            oprot.writeFieldBegin('Price', TType.I64, 5)
            oprot.writeI64(self.Price)
            oprot.writeFieldEnd()
        if self.Shares is not None:
            oprot.writeFieldBegin('Shares', TType.I32, 6)
            oprot.writeI32(self.Shares)
            oprot.writeFieldEnd()
        if self.Expiry is not None:
            oprot.writeFieldBegin('Expiry', TType.I64, 7)
            oprot.writeI64(self.Expiry)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRING, 8)
            oprot.writeString(self.error.encode('utf-8') if sys.version_info[0] == 2 else self.error)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QuoteData(object):
    """
    Attributes:
     - Quote
     - Symbol
     - UserId
     - Timestamp
     - Cryptokey
     - error
    """


    def __init__(self, Quote=None, Symbol=None, UserId=None, Timestamp=None, Cryptokey=None, error=None,):
        self.Quote = Quote
        self.Symbol = Symbol
        self.UserId = UserId
        self.Timestamp = Timestamp
        self.Cryptokey = Cryptokey
        self.error = error

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.Quote = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Symbol = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.UserId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.Timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.Cryptokey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.error = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QuoteData')
        if self.Quote is not None:
            oprot.writeFieldBegin('Quote', TType.I64, 1)
            oprot.writeI64(self.Quote)
            oprot.writeFieldEnd()
        if self.Symbol is not None:
            oprot.writeFieldBegin('Symbol', TType.STRING, 2)
            oprot.writeString(self.Symbol.encode('utf-8') if sys.version_info[0] == 2 else self.Symbol)
            oprot.writeFieldEnd()
        if self.UserId is not None:
            oprot.writeFieldBegin('UserId', TType.STRING, 3)
            oprot.writeString(self.UserId.encode('utf-8') if sys.version_info[0] == 2 else self.UserId)
            oprot.writeFieldEnd()
        if self.Timestamp is not None:
            oprot.writeFieldBegin('Timestamp', TType.I64, 4)
            oprot.writeI64(self.Timestamp)
            oprot.writeFieldEnd()
        if self.Cryptokey is not None:
            oprot.writeFieldBegin('Cryptokey', TType.STRING, 5)
            oprot.writeString(self.Cryptokey.encode('utf-8') if sys.version_info[0] == 2 else self.Cryptokey)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRING, 6)
            oprot.writeString(self.error.encode('utf-8') if sys.version_info[0] == 2 else self.error)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Response)
Response.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'Success', None, None, ),  # 1
    (2, TType.STRING, 'Message', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Stock', 'UTF8', None, ),  # 3
    (4, TType.I64, 'Quote', None, None, ),  # 4
    (5, TType.I64, 'ReqAmount', None, None, ),  # 5
    (6, TType.I64, 'RealAmount', None, None, ),  # 6
    (7, TType.I32, 'Shares', None, None, ),  # 7
    (8, TType.I64, 'Expiration', None, None, ),  # 8
    (9, TType.I64, 'Paid', None, None, ),  # 9
    (10, TType.I64, 'Received', None, None, ),  # 10
    (11, TType.I32, 'SharesAfford', None, None, ),  # 11
    (12, TType.I64, 'AffordAmount', None, None, ),  # 12
    (13, TType.STRUCT, 'Status', [UserInfo, None], None, ),  # 13
    (14, TType.LIST, 'Transactions', (TType.STRUCT, [Transaction, None], False), None, ),  # 14
    (15, TType.LIST, 'Triggers', (TType.STRUCT, [Trigger, None], False), None, ),  # 15
    (16, TType.LIST, 'File', (TType.STRING, 'BINARY', False), None, ),  # 16
)
all_structs.append(Command)
Command.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'C_type', None, None, ),  # 1
    (2, TType.I64, 'TransactionID', None, None, ),  # 2
    (3, TType.STRING, 'UserId', 'UTF8', None, ),  # 3
    (4, TType.I64, 'Amount', None, None, ),  # 4
    (5, TType.STRING, 'StockSymbol', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'FileName', 'UTF8', None, ),  # 6
    (7, TType.I64, 'Timestamp', None, None, ),  # 7
)
all_structs.append(UserInfo)
UserInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'Balance', None, None, ),  # 1
    (2, TType.I64, 'Reserved', None, None, ),  # 2
    (3, TType.STRUCT, 'Stock', [STOCK, None], None, ),  # 3
)
all_structs.append(User)
User.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'User', 'UTF8', None, ),  # 1
    (2, TType.I64, 'Balance', None, None, ),  # 2
    (3, TType.I64, 'Reserved', None, None, ),  # 3
    (4, TType.STRUCT, 'stock', [STOCK, None], None, ),  # 4
)
all_structs.append(STOCK)
STOCK.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'Real', None, None, ),  # 1
    (2, TType.I64, 'Reserved', None, None, ),  # 2
)
all_structs.append(Trigger)
Trigger.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'UserId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Stock', 'UTF8', None, ),  # 2
    (3, TType.I64, 'TransactionID', None, None, ),  # 3
    (4, TType.STRING, 'Type', 'UTF8', None, ),  # 4
    (5, TType.I32, 'Shares', None, None, ),  # 5
    (6, TType.I64, 'Amount', None, None, ),  # 6
    (7, TType.I64, 'When', None, None, ),  # 7
)
all_structs.append(Transaction)
Transaction.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'Type', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'Triggered', None, None, ),  # 2
    (3, TType.STRING, 'Stock', 'UTF8', None, ),  # 3
    (4, TType.I64, 'Amount', None, None, ),  # 4
    (5, TType.I32, 'Shares', None, None, ),  # 5
    (6, TType.I64, 'TimeStamp', None, None, ),  # 6
)
all_structs.append(PendingTxn)
PendingTxn.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'UserId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Stock', 'UTF8', None, ),  # 3
    (4, TType.I64, 'Reserved', None, None, ),  # 4
    (5, TType.I64, 'Price', None, None, ),  # 5
    (6, TType.I32, 'Shares', None, None, ),  # 6
    (7, TType.I64, 'Expiry', None, None, ),  # 7
    (8, TType.STRING, 'error', 'UTF8', None, ),  # 8
)
all_structs.append(QuoteData)
QuoteData.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'Quote', None, None, ),  # 1
    (2, TType.STRING, 'Symbol', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'UserId', 'UTF8', None, ),  # 3
    (4, TType.I64, 'Timestamp', None, None, ),  # 4
    (5, TType.STRING, 'Cryptokey', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'error', 'UTF8', None, ),  # 6
)
fix_spec(all_structs)
del all_structs

#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from databaseRPC import Database
from databaseRPC.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  DBResponse AddUserMoney(string userId, i64 amount)')
    print('  DBResponse UnreserveMoney(string userId, i64 amount)')
    print('  DBResponse ReserveMoney(string userId, i64 amount)')
    print('  i32 GetReserveMoney(string userId)')
    print('  DBResponse UnreserveShares(string userId, string stock, i32 shares)')
    print('  DBResponse ReservedShares(string userId, string stock, i32 shares)')
    print('  i32 GetReservedShares(string userId, string stock)')
    print('  DBResponse GetUser(string userId)')
    print('  DBResponse BulkTransactions( txns, bool wasCached)')
    print('  DBResponse ProcessTxn(PendingTxn txn, bool wasCached)')
    print('  void PushPendingTxn(PendingTxn pending)')
    print('  DBResponse AddNewTrigger(Trigger trigger)')
    print('  DBResponse CancelTrigger(string userId, string stock, string trigger_type)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Database.Client(protocol)
transport.open()

if cmd == 'AddUserMoney':
    if len(args) != 2:
        print('AddUserMoney requires 2 args')
        sys.exit(1)
    pp.pprint(client.AddUserMoney(args[0], eval(args[1]),))

elif cmd == 'UnreserveMoney':
    if len(args) != 2:
        print('UnreserveMoney requires 2 args')
        sys.exit(1)
    pp.pprint(client.UnreserveMoney(args[0], eval(args[1]),))

elif cmd == 'ReserveMoney':
    if len(args) != 2:
        print('ReserveMoney requires 2 args')
        sys.exit(1)
    pp.pprint(client.ReserveMoney(args[0], eval(args[1]),))

elif cmd == 'GetReserveMoney':
    if len(args) != 1:
        print('GetReserveMoney requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetReserveMoney(args[0],))

elif cmd == 'UnreserveShares':
    if len(args) != 3:
        print('UnreserveShares requires 3 args')
        sys.exit(1)
    pp.pprint(client.UnreserveShares(args[0], args[1], eval(args[2]),))

elif cmd == 'ReservedShares':
    if len(args) != 3:
        print('ReservedShares requires 3 args')
        sys.exit(1)
    pp.pprint(client.ReservedShares(args[0], args[1], eval(args[2]),))

elif cmd == 'GetReservedShares':
    if len(args) != 2:
        print('GetReservedShares requires 2 args')
        sys.exit(1)
    pp.pprint(client.GetReservedShares(args[0], args[1],))

elif cmd == 'GetUser':
    if len(args) != 1:
        print('GetUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetUser(args[0],))

elif cmd == 'BulkTransactions':
    if len(args) != 2:
        print('BulkTransactions requires 2 args')
        sys.exit(1)
    pp.pprint(client.BulkTransactions(eval(args[0]), eval(args[1]),))

elif cmd == 'ProcessTxn':
    if len(args) != 2:
        print('ProcessTxn requires 2 args')
        sys.exit(1)
    pp.pprint(client.ProcessTxn(eval(args[0]), eval(args[1]),))

elif cmd == 'PushPendingTxn':
    if len(args) != 1:
        print('PushPendingTxn requires 1 args')
        sys.exit(1)
    pp.pprint(client.PushPendingTxn(eval(args[0]),))

elif cmd == 'AddNewTrigger':
    if len(args) != 1:
        print('AddNewTrigger requires 1 args')
        sys.exit(1)
    pp.pprint(client.AddNewTrigger(eval(args[0]),))

elif cmd == 'CancelTrigger':
    if len(args) != 3:
        print('CancelTrigger requires 3 args')
        sys.exit(1)
    pp.pprint(client.CancelTrigger(args[0], args[1], args[2],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
